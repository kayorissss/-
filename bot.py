import json
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7690445262:AAHIRQax0ZNI6-lTKAB_8eR8tukfJaoIJdg"
ADMIN_ID = 1253981775
TRIGGER_FILE = "triggers.json"

# === FSM ===
class TriggerState(StatesGroup):
    adding = State()
    deleting = State()

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
def load_triggers():
    try:
        with open(TRIGGER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_triggers(data):
    with open(TRIGGER_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ===
triggers = {}

def update_triggers_from_file():
    global triggers
    triggers = load_triggers()

update_triggers_from_file()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
storage = MemoryStorage()
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

# === –ö–Ω–æ–ø–∫–∏ ===
def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="delete")],
        [InlineKeyboardButton(text="üìÉ –°–ø–∏—Å–æ–∫", callback_data="list")]
    ])

# === /admin ===
@dp.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîß –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=admin_keyboard())
    else:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# === –û—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã ===
@dp.message(F.text)
async def respond_to_trigger(message: Message):
    for trigger, answer in triggers.items():
        if trigger.lower() in message.text.lower():
            await message.reply(answer)
            break

# === –ö–Ω–æ–ø–∫–∏ ===
@dp.callback_query()
async def handle_buttons(call: CallbackQuery, state: FSMContext):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if call.data == "add":
        await state.set_state(TriggerState.adding)
        await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä –∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ\n–ü—Ä–∏–º–µ—Ä: `–ø—Ä–∏–≤–µ—Ç:–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!`")

    elif call.data == "delete":
        await state.set_state(TriggerState.deleting)
        await call.message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

    elif call.data == "list":
        update_triggers_from_file()
        if triggers:
            text = "\n".join([f"üîπ <b>{k}</b> ‚Üí {v}" for k, v in triggers.items()])
        else:
            text = "‚ùó –¢—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        await call.message.answer(text)

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ===
@dp.message(TriggerState.adding, F.text)
async def handle_add(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    if ":" not in message.text:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π `—Ç—Ä–∏–≥–≥–µ—Ä:–æ—Ç–≤–µ—Ç`.")
        return

    key, value = map(str.strip, message.text.split(":", 1))
    triggers[key.lower()] = value
    save_triggers(triggers)
    update_triggers_from_file()
    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n<b>{key}</b> ‚Üí {value}")
    await state.clear()

# === –£–¥–∞–ª–µ–Ω–∏–µ ===
@dp.message(TriggerState.deleting, F.text)
async def handle_delete(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    key = message.text.strip().lower()
    if key in triggers:
        del triggers[key]
        save_triggers(triggers)
        update_triggers_from_file()
        await message.reply(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: <b>{key}</b>")
    else:
        await message.reply("‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
